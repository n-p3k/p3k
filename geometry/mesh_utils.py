from geometry.mesh import *
import copy


def load_obj(filename):
    verts = []
    normals = []
    faces = []
    with  open(filename, 'r') as infile:
        infile.readline()
        for line in infile:
            words = line.split()
            if len(words) == 0:
                continue
            if words[0] == 'v':
                v = []
                for i in range(3):
                    v.append(float(words[i + 1]))
                verts.append(v)
            elif words[0] == 'vn':
                n = []
                for i in range(3):
                    n.append(float(words[i + 1]))
                normals.append(n)
            elif words[0] == 'f':
                f = []
                for i in range(3):
                    word = words[i + 1]
                    f.append(int(word.split("/")[0]))
                faces.append(f)

    verts = np.array(verts)
    normals = np.array(normals)
    faces = np.array(faces).astype(np.int) - 1
    m = Mesh()
    m.verts = verts
    m.normals = normals
    m.faces = faces
    return m

def save_obj(filepath, mesh):
    verts = mesh.verts
    faces = mesh.faces
    normals = mesh.normals

    with open(filepath, "w") as f:
        f.write('# mesh generated by p3')
        f.write('g merge mesh\n')

        # vertices
        for n, p in enumerate(verts):
            col = "1 1 1"
            line = "v {} {} {}   {}\n".format(
                p[0],
                p[1],
                p[2],
                col) 
            f.write(line)

        # normal
        f.write('\n')
        for n in normals:
            line = "vn {} {} {}\n".format(n[0], n[1], n[2])
            f.write(line)

        # faces
        for n, tri in enumerate(faces):
            t = np.array(tri) + 1
            n0 = t[0]
            n1 = t[1]
            n2 = t[2]

            line = "f {}//{} {}//{} {}//{}\n".format(
                t[0], n0, t[1], n1, t[2], n2)
            f.write(line)

def merge_mesh(mesh1, mesh2):
    mesh3 = copy.copy(mesh1)

    face_shift = len(mesh1.verts)
    print("add face 2 offset: ", face_shift)

    for ix, f in enumerate(mesh2.faces):
        mesh2.faces[ix][0] += face_shift
        mesh2.faces[ix][1] += face_shift
        mesh2.faces[ix][2] += face_shift

    mesh3.verts = np.vstack((mesh1.verts, mesh2.verts))
    mesh3.faces = np.vstack((mesh1.faces, mesh2.faces))
    mesh3.normals = np.vstack((mesh1.normals, mesh2.normals))

    return mesh3

def merge_mesh_files(filepath1, filepath2, outpath):
    print("merge files ", filepath1 + " " + filepath2)
    #m1 = Mesh() #MeshLoader().load(filepath1)[0]
    #m2 = Mesh() #MeshLoader().load(filepath2)[0]
    m1 = load_obj(filepath1) 
    m2 = load_obj(filepath2) 

    merged = merge_mesh(m1, m2)
    print('total vertices: ', len(merged.verts))
    print('total faces: ', len(merged.faces))
    print("exporting ", outpath)
    save_obj(outpath, merged)